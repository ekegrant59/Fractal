<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Place your Trades - Fractal Equities</title>
    <%- include('partials/headlinks') %>
</head>
<body>
    <%- include('partials/usernav') %>
     <main class="ps-4 ps-md-5 pe-4 px-lg-5 content py-3" data-bs-theme="dark">
        <div class="ps-md-2">
            <h1 class="font-poppins fw-semibold">COMING SOON.....</h1>
        </div>
        <!-- <div class="ps-md-2">
            <div class="">
                <div class="text-center mb-4">
                    <select id="crypto-select" class="form-select w-100 mx-auto text-center" style="max-width: 400px;">
                        <option value="">Select Cryptocurrency</option>
                        <option value="BTCUSDT" selected>Bitcoin</option>
                        <option value="ETHUSDT">Ethereum</option>
                        <option value="XRPUSDT">XRP</option>
                        <option value="BNBUSDT">BNB</option>
                        <option value="SOLUSDT">Solana</option>
                        <option value="DOGEUSDT">Dogecoin</option>
                        <option value="ADAUSDT">Cardano</option>
                        <option value="DOTUSDT">Polkadot</option>
                        <option value="LTCUSDT">Litecoin</option>
                    </select>
                </div>

                <div class="row" style="min-height: 600px;">
                    <div class="col-lg-8 mb-4">
                        <div id="chartPlaceholder" class="card h-100">
                            <div class="card-body d-flex align-items-center justify-content-center pb-0 pt-4" id="price-chart">
                                <div id="tradingview-container" style="height:100%;width:100%"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 mb-4 align-self-center">
                        <div class="card">
                            <div class="card-body">
                                <h2 class="card-title mb-4">Place Trades</h2>
                                <form id="tradeForm">
                                    <div class="mb-3">
                                        <label for="amount" class="form-label">Amount</label>
                                        <input type="number" id="amount" class="form-control" required>
                                        <small class="form-text text-muted">Available: $<span id="availableBalance"><%= user1.balance %></span></small>
                                    </div>
                                    <div class="mb-3">
                                        <label for="price" class="form-label">Price</label>
                                        <input type="text" id="crypto-price" class="form-control" required readonly value="$">
                                    </div>
                                    <div class="mb-3">
                                        <label for="leverage" class="form-label">Leverage: <span id="leverageValue">1</span>x</label>
                                        <input type="range" class="form-range" id="leverage" min="1" max="50" value="1">
                                    </div>
                                    <div class="d-flex justify-content-around">
                                        <button type="button" onclick="placeOrder('buy')" class="btn btn-success btn-lg">Buy</button>
                                        <button type="button" onclick="placeOrder('sell')" class="btn btn-danger btn-lg">Sell</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
        
                <div class="card mb-4 mt-5 ">
                    <div class="card-body d-flex justify-content-between">
                        <div>
                            <strong>Available Balance:</strong> $<span id="availableBalanceSum">10000</span>
                        </div>
                        <div>
                            <strong>Total Margin:</strong> $<span id="totalMargin">0</span>
                        </div>
                        <div>
                            <strong>Total PNL:</strong> $<span id="totalPNL">0</span>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-body">
                        <h2 class="card-title mb-4">Open Trades</h2>
                        <div class="table-responsive">
                            <table id="tradesTable" class="table table-dark table-striped">
                                <thead>
                                    <tr>
                                        <th>Crypto</th>
                                        <th>Amount</th>
                                        <th>Entry Price</th>
                                        <th>Date</th>
                                        <th>PNL</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                   
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div> -->
    </main>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    <!-- <script>
        
        const leverageSlider = document.getElementById('leverage');
        const leverageValue = document.getElementById('leverageValue');

        leverageSlider.addEventListener('input', function() {
            leverageValue.textContent = this.value;
        });

        function formatNumber(num) {
            if (Number.isInteger(num)) {
                return num.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            } else {
                return num.toLocaleString('en-US');
            }
        }


    let userbalance = Number("<%= user1.balance %>")

    document.getElementById('availableBalance').innerHTML = formatNumber(userbalance)
    document.getElementById('availableBalanceSum').innerHTML = formatNumber(userbalance)

    </script> -->

    <!-- <script>

        // DOM Elements
        const cryptoSelect = document.getElementById("crypto-select");
        const cryptoName = document.getElementById("crypto-name");
        const cryptoPrice = document.getElementById("crypto-price");
        const priceChart = document.getElementById("price-chart");

        let chart; // Chart.js instance

        /**
         * Fetch cryptocurrency data
         * @param {string} cryptoId - The ID of the selected cryptocurrency
         * @returns {object} - Contains the price and chart data
         */
        async function fetchCryptoData(cryptoId) {
            const [priceResponse, chartResponse] = await Promise.all([
                fetch(`/api/price/${cryptoId}`).then((res) => res.json())
            ]);

            return {
                price: priceResponse.price
            };
        }

        function updateChart(symbol) {
// Select the main container
const container = document.querySelector('#tradingview-container');

// Remove the old widget container
while (container.firstChild) {
  container.removeChild(container.firstChild); // Remove all children
}

// Create a new widget container
const widgetContainer = document.createElement('div');
widgetContainer.className = 'tradingview-widget-container';
widgetContainer.style.height = '100%';
widgetContainer.style.width = '100%';

const widget = document.createElement('div');
widget.className = 'tradingview-widget-container__widget';
widget.style.height = '100%';
widget.style.width = '100%';
widgetContainer.appendChild(widget);

const copyright = document.createElement('div');
copyright.className = 'tradingview-widget-copyright';
const link = document.createElement('a');
link.href = 'https://www.tradingview.com/';
link.rel = 'noopener nofollow';
link.target = '_blank';
copyright.appendChild(link);
widgetContainer.appendChild(copyright);

container.appendChild(widgetContainer);

// Create a new script element with updated symbol
const script = document.createElement('script');
script.type = 'text/javascript';
script.src = 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js';
script.async = true;

// Configure the widget options dynamically
const widgetConfig = {
  autosize: true,
  symbol: symbol, // Dynamic symbol passed as argument
  interval: 'D',
  timezone: 'Etc/UTC',
  theme: 'dark',
  style: '1',
  locale: 'en',
  enable_publishing: false,
  allow_symbol_change: true,
  support_host: 'https://www.tradingview.com',
};

script.innerHTML = JSON.stringify(widgetConfig);

// Append the script to the new widget container
widgetContainer.appendChild(script);
        }


        async function updateCryptoData(cryptoId) {
            const data = await fetchCryptoData(cryptoId); // Fetch data
            cryptoPrice.value = `$${data.price}`; // Update price
        }

        // Event Listener: Handle dropdown selection
        cryptoSelect.addEventListener("change", async (event) => {
            const selectedCrypto = event.target.value; // Selected cryptocurrency ID

            if (selectedCrypto) {
                updateChart(selectedCrypto); // Update chart
                await updateCryptoData(selectedCrypto);
            }
        });

        // Real-Time Updates: Refresh data every 10 seconds
        setInterval(async () => {
            const selectedCrypto = cryptoSelect.value || "BTCUSDT"; // Default to Bitcoin
            await updateCryptoData(selectedCrypto);
        }, 10000); // Update every 10 seconds

        // Initialize: Load default data for Bitcoin
        document.addEventListener("DOMContentLoaded", async () => {
            const defaultCryptoId = "BTCUSDT";
            updateChart(defaultCryptoId);
            await updateCryptoData(defaultCryptoId);

        });

    </script> -->

    
</body>
</html>